"""
체팅을 위한 모델

이곳에선 체팅을 위한 데이터 모델을 구성함. 예를 들어 체팅 저장하는것들
데이터 저장하는 방식 UML 디자인한거 ... 
그나마 데이터 흐름 그려놔서 좀 다행인듯 헷갈려 서 해맸을수도 ..? 
"""

from django.db import models
from django.contrib.auth.models import User
from scheduler.models import Schedule

class ChatMessage(models.Model):
    """
    ChatMessage model for storing chat messages.

    This model represents individual chat messages in the system, storing the message
    content, timestamp, sender information, and the chat room it belongs to.

    Attributes:
        content (str): The actual message text
        timestamp (DateTime): When the message was sent (auto-set)
        user (User): Reference to the user who sent the message
        room (str): The chat room identifier where the message was sent
    """
    ## Channels
    ## 인스턴스... 뭐가있을라나₩~
    ## 기껏해야 content나 timestep, Room, AI 만 import 필요 없음 ..? 
    # user: User 모델을 참조할거 가따 써~  User 모델은 auth app에서 import되어있으니 Foregien key ..음.
    # schedule: Schedule 모델을 참조할 수있도록, Schedule 모델은 scheduler app에서 import해보고~ 망할 그러니 Foreign key구먼.
    # is_ai: True if the message is generated by an AI, False otherwise (default is False) => 그렇데~ 
    content = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    schedule = models.ForeignKey(Schedule, on_delete=models.CASCADE, null=True, blank=True)
    room = models.CharField(max_length=100, null=True, blank=True)
    is_ai = models.BooleanField(default=False)

    def save(self, *args, **kwargs):
        # If this message is associated with a schedule, use its chat room
        
        if self.schedule and not self.room:
            self.room = self.schedule.chat_room
        # If no room is specified and no schedule, use 'general'
        elif not self.room:
            self.room = 'general'
        super().save(*args, **kwargs)
    
    ## 메타 데이터 클래스 망할 timestep 때문에 정리 해놓아야지 Metadata 로 정리해 놓자~  혹시 알아? 나중에 찾을때 도움될지? ~ 정리는 시간순이지~
    class Meta:
        ordering = ['timestamp']
    
    def __str__(self): ## 매번 느끼지만 파이썬은 __str__ (self) 있어서 좋넹~ get set 도 좋은데 하나면 되자너~
        ## 호호호호오오오오옥시 모르니 유저이름 + 첫 50 케릭으로 하쟈~ default는 여유있게~ 
        """
        Returns a string representation of the ChatMessage object.

        Returns:
            str: A formatted string containing the username and first 50 characters
                 of the message content.
        """
        return f"{self.user.username}: {self.content[:50]}"
